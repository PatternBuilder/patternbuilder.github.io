{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Pattern Builder\n\n\nThis is a suite of code that empowers your team to prototype in a static pattern library and then import the designs and content data model into Drupal with a single drush command.\n\n\nNeed to update your design? No problem! Just update and QA the code in your pattern library and import those changes in seconds.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-pattern-builder", 
            "text": "This is a suite of code that empowers your team to prototype in a static pattern library and then import the designs and content data model into Drupal with a single drush command.  Need to update your design? No problem! Just update and QA the code in your pattern library and import those changes in seconds.", 
            "title": "Welcome to Pattern Builder"
        }, 
        {
            "location": "/pattern_builder_library/", 
            "text": "Pattern Builder PHP Library\n\n\nWhat is it?\n\n\n\n\nThe library is a Symfony based PHP library that contains classes for setting data in the appropriate object layout for consumption and rendering by the Twig layer.\n\n\nLess jargon version: It lets you take data from anywhere and sets it up to work with Twig rendering.\n\n\n\n\nWhere\n\n\n\n\nGitHub: \nhttps://github.com/PatternBuilder/pattern-builder-lib-php\n\n\n\n\nHow\n\n\n\n\nTech setup: TODO", 
            "title": "PHP Library"
        }, 
        {
            "location": "/pattern_builder_library/#pattern-builder-php-library", 
            "text": "", 
            "title": "Pattern Builder PHP Library"
        }, 
        {
            "location": "/pattern_builder_library/#what-is-it", 
            "text": "The library is a Symfony based PHP library that contains classes for setting data in the appropriate object layout for consumption and rendering by the Twig layer.  Less jargon version: It lets you take data from anywhere and sets it up to work with Twig rendering.", 
            "title": "What is it?"
        }, 
        {
            "location": "/pattern_builder_library/#where", 
            "text": "GitHub:  https://github.com/PatternBuilder/pattern-builder-lib-php", 
            "title": "Where"
        }, 
        {
            "location": "/pattern_builder_library/#how", 
            "text": "Tech setup: TODO", 
            "title": "How"
        }, 
        {
            "location": "/pattern_builder_module/", 
            "text": "Pattern Builder Drupal Module\n\n\nWhat is it?\n\n\nThe Pattern Builder Module empowers your team to prototype in a static pattern library and then import the designs and content data model into Drupal with a single drush command.\n\n\nNeed to update your design? No problem! Just update and QA the code in your pattern library and import those changes in seconds.\n\n\nWhy\n\n\n\n\n\n\nThe Pattern Builder System empowers us to create a design system out of JSON schemas and Twig templates. To do this efficiently we need a tool that allows us to quickly prototype, build and validate our content structure and visual design.\n\n\n\n\n\n\nIt is important that developers and stakeholders have access to the growing design system.\n\n\n\n\n\n\nWhere\n\n\n\n\nDrupal.org: \nhttps://www.drupal.org/project/patternbuilder\n\n\nGitHub: \nhttps://github.com/PatternBuilder/pattern-builder-drupal\n\n\n\n\nHow\n\n\nGood question! It could be:\n\n\n\n\n\n\nComposer Module\n\n\n\n\nAdd composer dependency\n\n\nSymlink assets to web/app root (or use custom install location)\n\n\nCreate pb_config.yml\n\n\nIncludes paths to schemas/templates/data\n\n\nIncludes paths to js/css to add to preview\n\n\n\n\n\n\n\n\n\n\n\n\nGit clone\n\n\n\n\nClone repo to root (at least at/above theme)\n\n\nRepo includes\n\n\nIndex.php (index just pulls from app folder)\n\n\npb_config.yml\n\n\nApp_folder\n\n\n\n\n\n\n\n\n\n\n\n\nGrunt Project\n\n\n\n\nClone grunt repo. NPM install, Bower Install, Composer install\n\n\nUse built in yeoman to create templates/schemas\n\n\nAdd sass and sample data to component/layout folders\n\n\nRun grunt commands to compile, spin up local php server, lint etc\n\n\n\n\n\n\n\n\nJSON Schema Support\n\n\n\n\n\n\nProperty \"uniqueId\"\n\n\nIf the schema defines a \"uniqueId\" property, then the property value is set to the paragraph entity's item id during the rendering process.\n\n\n\n\n\n\nTODO\n\n\nInstall Options: (NEEDS CLEANUP)\ninstall patternbuilder module, composer install in the patternbuilder module folder + install composer_manager\n\n\nOR\n\n\ninstall patternbuilder module, clone patternbuilder-lib-php into libraries and then composer install from there", 
            "title": "Drupal Module"
        }, 
        {
            "location": "/pattern_builder_module/#pattern-builder-drupal-module", 
            "text": "", 
            "title": "Pattern Builder Drupal Module"
        }, 
        {
            "location": "/pattern_builder_module/#what-is-it", 
            "text": "The Pattern Builder Module empowers your team to prototype in a static pattern library and then import the designs and content data model into Drupal with a single drush command.  Need to update your design? No problem! Just update and QA the code in your pattern library and import those changes in seconds.", 
            "title": "What is it?"
        }, 
        {
            "location": "/pattern_builder_module/#why", 
            "text": "The Pattern Builder System empowers us to create a design system out of JSON schemas and Twig templates. To do this efficiently we need a tool that allows us to quickly prototype, build and validate our content structure and visual design.    It is important that developers and stakeholders have access to the growing design system.", 
            "title": "Why"
        }, 
        {
            "location": "/pattern_builder_module/#where", 
            "text": "Drupal.org:  https://www.drupal.org/project/patternbuilder  GitHub:  https://github.com/PatternBuilder/pattern-builder-drupal", 
            "title": "Where"
        }, 
        {
            "location": "/pattern_builder_module/#how", 
            "text": "Good question! It could be:    Composer Module   Add composer dependency  Symlink assets to web/app root (or use custom install location)  Create pb_config.yml  Includes paths to schemas/templates/data  Includes paths to js/css to add to preview       Git clone   Clone repo to root (at least at/above theme)  Repo includes  Index.php (index just pulls from app folder)  pb_config.yml  App_folder       Grunt Project   Clone grunt repo. NPM install, Bower Install, Composer install  Use built in yeoman to create templates/schemas  Add sass and sample data to component/layout folders  Run grunt commands to compile, spin up local php server, lint etc", 
            "title": "How"
        }, 
        {
            "location": "/pattern_builder_module/#json-schema-support", 
            "text": "Property \"uniqueId\"  If the schema defines a \"uniqueId\" property, then the property value is set to the paragraph entity's item id during the rendering process.", 
            "title": "JSON Schema Support"
        }, 
        {
            "location": "/pattern_builder_module/#todo", 
            "text": "Install Options: (NEEDS CLEANUP)\ninstall patternbuilder module, composer install in the patternbuilder module folder + install composer_manager  OR  install patternbuilder module, clone patternbuilder-lib-php into libraries and then composer install from there", 
            "title": "TODO"
        }, 
        {
            "location": "/pattern_builder_importer/", 
            "text": "Pattern Builder Schema Importer Drupal Module\n\n\nTL;DR\n\n\nIt converts an library of JSON Schemas into Drupal paragraph bundles, and the JSON schema properties are converted into Drupal fields.\n\n\nWhy\n\n\n\n\n\n\nWith a library of patterns created in Pattern Builder, we need a method for creating each Drupal admin interface that allow users to enter the data needed for each template.\n\n\n\n\n\n\nAs a content admin, you may want to create a customizable content type(s) which include entity references to smaller content patterns, such as field collection bundles. These bundles will be built to match the defined components from the Styleguide. This would expose the ability to both create content and control the ordering, layout, and design from within the node editing interface, and would be fully revisionable. Additionally, editors would be able reference \n include existing view blocks within the field groups. Editors could then apply data attributes such as layout and theme to these view blocks or field collections.\n\n\n\n\n\n\nWhere\n\n\n\n\nDrupal: \nhttps://www.drupal.org/project/patternbuilder\n\n\nGitHub: \nhttps://github.com/PatternBuilder/pattern-builder-drupal\n\n\n\n\nHow\n\n\n\n\n\n\nTech Setup\n\n\n\n\nInstall and enable module\n\n\n\n\nSet up the import paths\n\n\n\n\nVisit \nadmin/config/content/patternbuilder\n\n\nSchema directories\n\n\nTemplate directories\n\n\n\n\n\n\n\n\nUse Drush to run the pattern builder import command\n\n\n\n\nIf there are new patterns, first rsync webrh\n\n\nSSL into sandbox\n\n\nRun \ndrush pbi\n\n\n\n\n\n\n\n\nView the imported patterns now stored as paragraph bundles\n\n\n\n\nVisit admin/structure/paragraphs\n\n\n\n\n\n\n\n\nManage Fields on the (new) content type,\n\n\n\n\nAdd a paragraphs field, choose which patterns you want to make available for content editors\n\n\nSet widget to \u201cEmbedded Patterns\u201d\n\n\n\n\n\n\n\n\nManage Display: Set the display format on the paragraph field to \"Patternbuilder rendered items\"\n\n\n\n\nOther Notes:\n\n\nDon\u2019t forget to load the webrh.css via a pre-process function or the style module\n\n\nOptional: Modify the content type node--[type].tpl.php as needed to remove other regions etc\n\n\nTo use the test pattern, enabled \u201cRed Hat webrh test\u201d on the modules page: /admin/modules?filter=webrh_test\nenabled=1\ndisabled=1\nrequired=1\nunavailable=1 -- it will take a while to import so you have to wait for the page to be done refreshing\n\n\n\n\n\n\n\n\n\n\n\n\nDrush Commands\n\n\n\n\n\n\nImports patterns from defined library\n\n\n\n\ndrush pbi \u00a0: Import all schemas.\n\n\ndrush pbi --all \u00a0: \u00a0Force the import of all schemas even if specific schemas are defined.\n\n\ndrush pbi band card : \u00a0Import only the \"band\" and \"card\" schemas.\n\n\ndrush pbi --type=layout \u00a0: Import only the schemas for the \"layout\" pattern type.\n\n\ndrush pbi -image_box\n\n\n\n\n\n\n\n\nRemove imported patterns from Drupal\n\n\n\n\ndrush pbi-remove \u00a0: Nothing is removed. This safeguards against accidental commands.\n\n\ndrush pbi-remove --all : Removes all schemas.\n\n\ndrush pbi-remove band card : Removes only the \"band\" and \"card\" schemas.\n\n\ndrush pbi-remove --type=layout : Removes only the schemas for the \"layout\" pattern type.\n\n\n\n\n\n\n\n\n\n\n\n\nJSON Schema Support\n\n\nThe schema used by Pattern Builder is based on \nJSON Schema\n with customizations for the Drupal importer.\n\n\n\n\n\n\nProperty Types:\n\n\n\n\nPrimitive types: \"boolean\", \"integer\", \"number\", \"string\", \"text\", \"textarea\".\n\n\nSingle level group of properties: \"object\".\n\n\nMultiple values with the same object properties: \"array\".\n\n\n\n\n\n\n\n\nHidden on the edit form\n\n\n\n\nSchema: \n\"options: { \"hidden\": true }\n\n\nDrupal configuration: Field instance setting.\n\n\n\n\n\n\n\n\nRead-only on the edit form\n\n\n\n\nSchema: \n\"readonly\": true\n\n\nDrupal configuration: Field instance setting.\n\n\n\n\n\n\n\n\nNon-imported properties:\n\n\nIf a property does not need to be imported as a Drupal field, then it can be flagged to not import it with:\n\n\n\n\nSchema: \n\"options: { \"import\": false }\n\n\nDrupal configuration: None\n\n\n\n\n\n\n\n\nTextarea\n\n\nTextareas are imported to a Drupal field type of \"text_long\". A schema property is consider to be a textarea if one of the following is true:\n\n\n\n\nSchema: \n\"format\": \"textarea\"\n OR \n\"format\": \"html\"\n\n\nDrupal configuration: Field type.\n\n\n\n\n\n\n\n\nWYSIWYG / Filtered text\n\n\nFilter text in Drupal provides the user with the Input Format selector. These commonly are configured to use a WYSIWYG editor.\nA schema property is determined to allow filtered text if the following is set:\n\n\n\n\nSchema: \n\"format\": \"html\"\n\n\nDrupal configuration: Field instance setting.\n\n\n\n\n\n\n\n\nCollapsible Field Groups and Field Collections\n\n\nThe \nfield_group\n module is required by the importer in order to provide basic single level grouping. The schema can control the collapsibility of a group of properties with the following:\n\n\n\n\n\n\nSchema:\n\n\n\"options\": {\n  \"collapsed\": true,\n  \"disable_collapse\": false\n}\n\n\n\n\n\n\nDrupal configuration: Field group setting, Field Collecton Fieldset widget.\n\n\n\n\n\n\n\n\n\n\nForm Grid Layout\n\n\nThis provides the ability to display grid style form elements.\n\n\n\n\n\n\nGlobal config: \"admin/config/content/patternbuilder\"\n\n\n\n\nRow class: The class for the row container in the grid layout.\n\n\nColumn class prefix: The number of columns will be appended to the column class prefix. Example: \"grid-columns-\" results in \"grid-columns-4\".\n\n\n\n\n\n\n\n\nSchema:\n\n\n\"options\": {\n  \"grid_columns\": 2\n},\n\"items\": {\n  \"format\": \"grid\"\n}\n\n\n\n\n\n\nDrupal configuration: Field instance setting.\n\n\n\n\n\n\n\n\n\n\nParagraphs preview display view mode\n\n\nThe importer can automatically setup up the \"Paragraphs Editor Preview\" view mode if the property is configured as \"preview\".  The importer has some default formatters for some common fields (text, image). Refer to the patternbuilder_importer.api.php for hooks that allow setting custom formatters for the preview view mode.\n\n\n\n\nSchema: \n\"options: { \"preview\": true }\n\n\nDrupal configuration: Field display view mode settings.\n\n\n\n\n\n\n\n\nOptional Drupal Extensions\n\n\nThe following are optional Drupal modules that are supported natively by the Pattern Builder Importer.  If these modules are enabled on the site, then the magic happens automatically.\n\n\n\n\n\n\nMedia (\nhttps://www.drupal.org/project/media\n)\n\n\n\n\nSupports: file, image, audio, video\n\n\nSchema usage: \"entity\": \"file|image|audio|video\"\n\n\n\n\n\n\n\n\nMedia Internet - Submodule of Media (\nhttps://www.drupal.org/project/media\n)\n\n\n\n\nSupports: internet based files\n\n\nSchema usage: \"entity\": \"file|image|audio|video\"\n\n\n\n\n\n\n\n\nMedia YouTube (\nhttps://www.drupal.org/project/media_youtube\n)\n\n\n\n\nSupports: YouTube videos\n\n\nSchema usage: \"entity\": \"video\"\n\n\n\n\n\n\n\n\nLink (\nhttps://www.drupal.org/project/link\n)\n\n\n\n\nSupports: link fields\n\n\nSchema usage: \"entity\": \"link\"\n\n\n\n\n\n\n\n\nField Collection (\nhttps://www.drupal.org/project/field_collection\n)\n\n\n\n\nSupports: array of objects imported as a field collection.\n\n\nSchema usage: \"type\": \"array\", \"items\": { Each item object definition }\n\n\n\n\n\n\n\n\nField Collection Fieldset (\nhttps://www.drupal.org/project/field_collection_fieldset\n)\n\n\n\n\nSupports: collapsible array of objects imported to a field collection.\n\n\nSchema usage: \"options\": {\"collapsed\": true/false, \"disable_collapse\": true/false}\n\n\n\n\n\n\n\n\nField Multiple Extended (\nhttps://www.drupal.org/project/field_multiple_extended\n)\n\n\n\n\nSupports: Set minimum and maximum items on a property.\n\n\nSchema usage: \"type\": \"array\", \"minItems\": 2, \"maxItems\": 10\n\n\n\n\n\n\n\n\nFuture Plans\n\n\n\n\nUse standard Drupal 8 rendering engine.\n\n\nCMI (config mgmt), use schemas to manipulate YML files.", 
            "title": "Drupal Schema Importer"
        }, 
        {
            "location": "/pattern_builder_importer/#pattern-builder-schema-importer-drupal-module", 
            "text": "", 
            "title": "Pattern Builder Schema Importer Drupal Module"
        }, 
        {
            "location": "/pattern_builder_importer/#tldr", 
            "text": "It converts an library of JSON Schemas into Drupal paragraph bundles, and the JSON schema properties are converted into Drupal fields.", 
            "title": "TL;DR"
        }, 
        {
            "location": "/pattern_builder_importer/#why", 
            "text": "With a library of patterns created in Pattern Builder, we need a method for creating each Drupal admin interface that allow users to enter the data needed for each template.    As a content admin, you may want to create a customizable content type(s) which include entity references to smaller content patterns, such as field collection bundles. These bundles will be built to match the defined components from the Styleguide. This would expose the ability to both create content and control the ordering, layout, and design from within the node editing interface, and would be fully revisionable. Additionally, editors would be able reference   include existing view blocks within the field groups. Editors could then apply data attributes such as layout and theme to these view blocks or field collections.", 
            "title": "Why"
        }, 
        {
            "location": "/pattern_builder_importer/#where", 
            "text": "Drupal:  https://www.drupal.org/project/patternbuilder  GitHub:  https://github.com/PatternBuilder/pattern-builder-drupal", 
            "title": "Where"
        }, 
        {
            "location": "/pattern_builder_importer/#how", 
            "text": "Tech Setup   Install and enable module   Set up the import paths   Visit  admin/config/content/patternbuilder  Schema directories  Template directories     Use Drush to run the pattern builder import command   If there are new patterns, first rsync webrh  SSL into sandbox  Run  drush pbi     View the imported patterns now stored as paragraph bundles   Visit admin/structure/paragraphs     Manage Fields on the (new) content type,   Add a paragraphs field, choose which patterns you want to make available for content editors  Set widget to \u201cEmbedded Patterns\u201d     Manage Display: Set the display format on the paragraph field to \"Patternbuilder rendered items\"   Other Notes:  Don\u2019t forget to load the webrh.css via a pre-process function or the style module  Optional: Modify the content type node--[type].tpl.php as needed to remove other regions etc  To use the test pattern, enabled \u201cRed Hat webrh test\u201d on the modules page: /admin/modules?filter=webrh_test enabled=1 disabled=1 required=1 unavailable=1 -- it will take a while to import so you have to wait for the page to be done refreshing       Drush Commands    Imports patterns from defined library   drush pbi \u00a0: Import all schemas.  drush pbi --all \u00a0: \u00a0Force the import of all schemas even if specific schemas are defined.  drush pbi band card : \u00a0Import only the \"band\" and \"card\" schemas.  drush pbi --type=layout \u00a0: Import only the schemas for the \"layout\" pattern type.  drush pbi -image_box     Remove imported patterns from Drupal   drush pbi-remove \u00a0: Nothing is removed. This safeguards against accidental commands.  drush pbi-remove --all : Removes all schemas.  drush pbi-remove band card : Removes only the \"band\" and \"card\" schemas.  drush pbi-remove --type=layout : Removes only the schemas for the \"layout\" pattern type.", 
            "title": "How"
        }, 
        {
            "location": "/pattern_builder_importer/#json-schema-support", 
            "text": "The schema used by Pattern Builder is based on  JSON Schema  with customizations for the Drupal importer.    Property Types:   Primitive types: \"boolean\", \"integer\", \"number\", \"string\", \"text\", \"textarea\".  Single level group of properties: \"object\".  Multiple values with the same object properties: \"array\".     Hidden on the edit form   Schema:  \"options: { \"hidden\": true }  Drupal configuration: Field instance setting.     Read-only on the edit form   Schema:  \"readonly\": true  Drupal configuration: Field instance setting.     Non-imported properties:  If a property does not need to be imported as a Drupal field, then it can be flagged to not import it with:   Schema:  \"options: { \"import\": false }  Drupal configuration: None     Textarea  Textareas are imported to a Drupal field type of \"text_long\". A schema property is consider to be a textarea if one of the following is true:   Schema:  \"format\": \"textarea\"  OR  \"format\": \"html\"  Drupal configuration: Field type.     WYSIWYG / Filtered text  Filter text in Drupal provides the user with the Input Format selector. These commonly are configured to use a WYSIWYG editor.\nA schema property is determined to allow filtered text if the following is set:   Schema:  \"format\": \"html\"  Drupal configuration: Field instance setting.     Collapsible Field Groups and Field Collections  The  field_group  module is required by the importer in order to provide basic single level grouping. The schema can control the collapsibility of a group of properties with the following:    Schema:  \"options\": {\n  \"collapsed\": true,\n  \"disable_collapse\": false\n}    Drupal configuration: Field group setting, Field Collecton Fieldset widget.      Form Grid Layout  This provides the ability to display grid style form elements.    Global config: \"admin/config/content/patternbuilder\"   Row class: The class for the row container in the grid layout.  Column class prefix: The number of columns will be appended to the column class prefix. Example: \"grid-columns-\" results in \"grid-columns-4\".     Schema:  \"options\": {\n  \"grid_columns\": 2\n},\n\"items\": {\n  \"format\": \"grid\"\n}    Drupal configuration: Field instance setting.      Paragraphs preview display view mode  The importer can automatically setup up the \"Paragraphs Editor Preview\" view mode if the property is configured as \"preview\".  The importer has some default formatters for some common fields (text, image). Refer to the patternbuilder_importer.api.php for hooks that allow setting custom formatters for the preview view mode.   Schema:  \"options: { \"preview\": true }  Drupal configuration: Field display view mode settings.", 
            "title": "JSON Schema Support"
        }, 
        {
            "location": "/pattern_builder_importer/#optional-drupal-extensions", 
            "text": "The following are optional Drupal modules that are supported natively by the Pattern Builder Importer.  If these modules are enabled on the site, then the magic happens automatically.    Media ( https://www.drupal.org/project/media )   Supports: file, image, audio, video  Schema usage: \"entity\": \"file|image|audio|video\"     Media Internet - Submodule of Media ( https://www.drupal.org/project/media )   Supports: internet based files  Schema usage: \"entity\": \"file|image|audio|video\"     Media YouTube ( https://www.drupal.org/project/media_youtube )   Supports: YouTube videos  Schema usage: \"entity\": \"video\"     Link ( https://www.drupal.org/project/link )   Supports: link fields  Schema usage: \"entity\": \"link\"     Field Collection ( https://www.drupal.org/project/field_collection )   Supports: array of objects imported as a field collection.  Schema usage: \"type\": \"array\", \"items\": { Each item object definition }     Field Collection Fieldset ( https://www.drupal.org/project/field_collection_fieldset )   Supports: collapsible array of objects imported to a field collection.  Schema usage: \"options\": {\"collapsed\": true/false, \"disable_collapse\": true/false}     Field Multiple Extended ( https://www.drupal.org/project/field_multiple_extended )   Supports: Set minimum and maximum items on a property.  Schema usage: \"type\": \"array\", \"minItems\": 2, \"maxItems\": 10", 
            "title": "Optional Drupal Extensions"
        }, 
        {
            "location": "/pattern_builder_importer/#future-plans", 
            "text": "Use standard Drupal 8 rendering engine.  CMI (config mgmt), use schemas to manipulate YML files.", 
            "title": "Future Plans"
        }, 
        {
            "location": "/using_pattern_builder/", 
            "text": "Various Scenarios of using pattern builder module\n\n\nAdd a Pattern Field to a Content Type\n\n\n\n\nCreate a new content type or use an existing one.\n\n\nAdd a paragraphs field with patterns enabled.\n\n\nWidget: \"Embedded Patterns\" or \"Embedded Patterns with Previewer\" (requires patternbuilder_previewer module).\n\n\nLimit the pattern selection by type (\"Pattern\", \"Components\"). These need to be defined in hook_patternbuilder_pattern_types().\n\n\nAny non-pattern paragraph needs to be explicitly selected in the list of \"Allowed paragraph bundles\"\n\n\n\n\n\n\nDisplay Formatter: \"Patternbuilder rendered items\"\n\n\nSelect display mode used to render the embed paragraphs. Defaults to \"Full\". For Patterns, the formatted values of the paragraph field is sent to the TWIG templates for display.\n\n\n\n\n\n\n\n\n\n\nCreate content with Patterns!\n\n\n\n\nChoose a method\n\n\n\n\n\n\nThe whole kit AND kaboodle! (recommended) \u00a0Use pattern builder importer to pull in your patterns and schemas from your component library\n\n\n\n\nBuild a content type with a Pattern field (see above).\n\n\nConfigure the directories for the JSON schemas and TWIG templates at \"admin/config/content/patternbuilder\"\n\n\nEnable the patternbuilder_importer module.\n\n\nImport the Pattern Schemas to Paragraph bundles:\n\n\nFrom the command line, run \"drush pbi\".\n\n\n(TODO) From the UI: Pending development.\n\n\n\n\n\n\n\n\n\n\n\n\nHybrid: \u00a0Map existing Drupal fields to Schema properties\n\n\n\n\nAllows for developers to map data (even from external sources) to the json/twig data.\n\n\nGood for existing content types.\n\n\nNot good for complex field setups since hand mapping takes time and is error prone.\n\n\nHow:\n\n\nOverride the node view of a given content type.\n\n\nUse the existing Drupal fields to build the render object using the PatternBuilder Library.\n\n\nSet the node view content as the rendered object.\n\n\n\n\n\n\n\n\n\n\n\n\n(TODO) Component library only, No importer\n\n\n\n\nBuild a content type with a Pattern field (see above).\n\n\nConfigure the directories for the JSON schemas and TWIG templates at \"admin/config/content/patternbuilder\"\n\n\nCreate a paragraph bundle.\n\n\n(TODO: Pending development) Associate the paragraph bundle with a JSON Schema.\n\n\nAdd a field to the paragraph bundle.\n\n\nConfigure the section \"Pattern Builder\".\n\n\nRequired: Set the \"Property name\" of the JSON Schema property that maps to this field.\n\n\n\n\n\n\n\n\n\n\n\n\nOther things to note\n\n\n\n\nYour Drupal theme should (only) be responsible for the chrome of the site (header \n footer)", 
            "title": "Drupal Usage"
        }, 
        {
            "location": "/using_pattern_builder/#various-scenarios-of-using-pattern-builder-module", 
            "text": "", 
            "title": "Various Scenarios of using pattern builder module"
        }, 
        {
            "location": "/using_pattern_builder/#add-a-pattern-field-to-a-content-type", 
            "text": "Create a new content type or use an existing one.  Add a paragraphs field with patterns enabled.  Widget: \"Embedded Patterns\" or \"Embedded Patterns with Previewer\" (requires patternbuilder_previewer module).  Limit the pattern selection by type (\"Pattern\", \"Components\"). These need to be defined in hook_patternbuilder_pattern_types().  Any non-pattern paragraph needs to be explicitly selected in the list of \"Allowed paragraph bundles\"    Display Formatter: \"Patternbuilder rendered items\"  Select display mode used to render the embed paragraphs. Defaults to \"Full\". For Patterns, the formatted values of the paragraph field is sent to the TWIG templates for display.      Create content with Patterns!", 
            "title": "Add a Pattern Field to a Content Type"
        }, 
        {
            "location": "/using_pattern_builder/#choose-a-method", 
            "text": "The whole kit AND kaboodle! (recommended) \u00a0Use pattern builder importer to pull in your patterns and schemas from your component library   Build a content type with a Pattern field (see above).  Configure the directories for the JSON schemas and TWIG templates at \"admin/config/content/patternbuilder\"  Enable the patternbuilder_importer module.  Import the Pattern Schemas to Paragraph bundles:  From the command line, run \"drush pbi\".  (TODO) From the UI: Pending development.       Hybrid: \u00a0Map existing Drupal fields to Schema properties   Allows for developers to map data (even from external sources) to the json/twig data.  Good for existing content types.  Not good for complex field setups since hand mapping takes time and is error prone.  How:  Override the node view of a given content type.  Use the existing Drupal fields to build the render object using the PatternBuilder Library.  Set the node view content as the rendered object.       (TODO) Component library only, No importer   Build a content type with a Pattern field (see above).  Configure the directories for the JSON schemas and TWIG templates at \"admin/config/content/patternbuilder\"  Create a paragraph bundle.  (TODO: Pending development) Associate the paragraph bundle with a JSON Schema.  Add a field to the paragraph bundle.  Configure the section \"Pattern Builder\".  Required: Set the \"Property name\" of the JSON Schema property that maps to this field.", 
            "title": "Choose a method"
        }, 
        {
            "location": "/using_pattern_builder/#other-things-to-note", 
            "text": "Your Drupal theme should (only) be responsible for the chrome of the site (header   footer)", 
            "title": "Other things to note"
        }
    ]
}