{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Pattern Builder\n\n\nThis is a suite of code that empowers your team to prototype in a static pattern library and then import the designs and content data model into Drupal with a single drush command.\n\n\nNeed to update your design? No problem! Just update and QA the code in your pattern library and import those changes in seconds.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-pattern-builder", 
            "text": "This is a suite of code that empowers your team to prototype in a static pattern library and then import the designs and content data model into Drupal with a single drush command.  Need to update your design? No problem! Just update and QA the code in your pattern library and import those changes in seconds.", 
            "title": "Welcome to Pattern Builder"
        }, 
        {
            "location": "/pattern_kit/", 
            "text": "Pattern Kit\n\n\nPattern Kit is an application that lets you preview your library of templates and manipulate their content by interacting with a form built from the schemas. It is both a development tool and a public facing pattern library.\n\n\nFor a demo check out \nPattern Kit Demo\n. \n\n\nInstallation\n\n\nNote, by following these instructions you do \nnot\n need to clone this git repository.\n\n\nCreate composer.json at pattern library root and require pattern kit\n\n\nrequire\n: {\n    \npattern-builder/pattern-kit\n: \n@dev\n\n},\n\nrepositories\n: [\n  {\n    \ntype\n: \nvcs\n,\n    \nurl\n: \nhttps://github.com/PatternBuilder/pattern-kit\n\n  }\n]\n\n\n\n\nAdd index.php at pattern library root\n\n\n?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire __DIR__ . '/vendor/pattern-builder/pattern-kit/src/app.php';\n\n$app['http_cache']-\nrun();\n\n\n\n\n\nAdd .pk-config.yml at pattern library root\n\n\n\n\nCreate arrays of paths to your data, schema, template, docs and styleguide files (relative to config)\n\n\nSet the file extensions for each file type\n\n\nList categories in order you'd like them to appear in navigation\n\n\nCreate arrays of assets for css, js and footer js (including live reload if necessary)\n\n\n\n\n\ntitle: Project Title\n\npaths:  # relative to your pattern library root\n  data:\n    - path/to/sample/data\n  schemas:\n    - path/to/schemas\n  templates:\n    - path/to/templates\n  docs:\n    - path/to/schemas-docs\n  sg:\n    - path/to/stylelguide/docs\nextensions:\n  data: .docs.json\n  schemas: .json\n  templates: .twig\n  docs: .docs.md\n  sg: .sg.md\ncategories:\n    - Pattern\n    - Sub Pattern\n    - Layout\n    - Component\n    - Atom\nassets:\n  css:\n    - path/to/css\n    - path/to/othercss\n  js:\n    - path/to/js\n    - path/to/otherjs\n  footer_js:\n    - path/to/footer_js\n    - path/to/otherfooter_js\n    - //localhost:1336/livereload.js\n\n\n\n\nIn your terminal, \n\n\n$ cd [pattern library root]\n$ composer install\n\n\n\n\nUse Pattern Kit\n\n\nPoint MAMP or local PHP server at your index.php file\n\n\nphp -S 0:9001 -t ./", 
            "title": "Pattern Kit"
        }, 
        {
            "location": "/pattern_kit/#pattern-kit", 
            "text": "Pattern Kit is an application that lets you preview your library of templates and manipulate their content by interacting with a form built from the schemas. It is both a development tool and a public facing pattern library.  For a demo check out  Pattern Kit Demo .", 
            "title": "Pattern Kit"
        }, 
        {
            "location": "/pattern_kit/#installation", 
            "text": "Note, by following these instructions you do  not  need to clone this git repository.", 
            "title": "Installation"
        }, 
        {
            "location": "/pattern_kit/#create-composerjson-at-pattern-library-root-and-require-pattern-kit", 
            "text": "require : {\n     pattern-builder/pattern-kit :  @dev \n}, repositories : [\n  {\n     type :  vcs ,\n     url :  https://github.com/PatternBuilder/pattern-kit \n  }\n]", 
            "title": "Create composer.json at pattern library root and require pattern kit"
        }, 
        {
            "location": "/pattern_kit/#add-indexphp-at-pattern-library-root", 
            "text": "?php\n\nrequire_once __DIR__ . '/vendor/autoload.php';\nrequire __DIR__ . '/vendor/pattern-builder/pattern-kit/src/app.php';\n\n$app['http_cache']- run();", 
            "title": "Add index.php at pattern library root"
        }, 
        {
            "location": "/pattern_kit/#add-pk-configyml-at-pattern-library-root", 
            "text": "Create arrays of paths to your data, schema, template, docs and styleguide files (relative to config)  Set the file extensions for each file type  List categories in order you'd like them to appear in navigation  Create arrays of assets for css, js and footer js (including live reload if necessary)   \ntitle: Project Title\n\npaths:  # relative to your pattern library root\n  data:\n    - path/to/sample/data\n  schemas:\n    - path/to/schemas\n  templates:\n    - path/to/templates\n  docs:\n    - path/to/schemas-docs\n  sg:\n    - path/to/stylelguide/docs\nextensions:\n  data: .docs.json\n  schemas: .json\n  templates: .twig\n  docs: .docs.md\n  sg: .sg.md\ncategories:\n    - Pattern\n    - Sub Pattern\n    - Layout\n    - Component\n    - Atom\nassets:\n  css:\n    - path/to/css\n    - path/to/othercss\n  js:\n    - path/to/js\n    - path/to/otherjs\n  footer_js:\n    - path/to/footer_js\n    - path/to/otherfooter_js\n    - //localhost:1336/livereload.js  In your terminal,   $ cd [pattern library root]\n$ composer install", 
            "title": "Add .pk-config.yml at pattern library root"
        }, 
        {
            "location": "/pattern_kit/#use-pattern-kit", 
            "text": "Point MAMP or local PHP server at your index.php file  php -S 0:9001 -t ./", 
            "title": "Use Pattern Kit"
        }, 
        {
            "location": "/pattern_builder_library/", 
            "text": "Pattern Builder PHP Library\n\n\nWhat is it?\n\n\n\n\nThe library is a Symfony based PHP library that contains classes for setting data in the appropriate object layout for consumption and rendering by the Twig layer.\n\n\nLess jargon version: It lets you take data from anywhere and sets it up to work with Twig rendering.\n\n\n\n\nWhere\n\n\n\n\nGitHub: \nhttps://github.com/PatternBuilder/pattern-builder-lib-php\n\n\n\n\nHow\n\n\n\n\nTech setup: TODO", 
            "title": "PHP Library"
        }, 
        {
            "location": "/pattern_builder_library/#pattern-builder-php-library", 
            "text": "", 
            "title": "Pattern Builder PHP Library"
        }, 
        {
            "location": "/pattern_builder_library/#what-is-it", 
            "text": "The library is a Symfony based PHP library that contains classes for setting data in the appropriate object layout for consumption and rendering by the Twig layer.  Less jargon version: It lets you take data from anywhere and sets it up to work with Twig rendering.", 
            "title": "What is it?"
        }, 
        {
            "location": "/pattern_builder_library/#where", 
            "text": "GitHub:  https://github.com/PatternBuilder/pattern-builder-lib-php", 
            "title": "Where"
        }, 
        {
            "location": "/pattern_builder_library/#how", 
            "text": "Tech setup: TODO", 
            "title": "How"
        }, 
        {
            "location": "/pattern_builder_module/", 
            "text": "Pattern Builder Drupal Module\n\n\nWhat is it?\n\n\nThe Pattern Builder Module empowers your team to prototype in a static pattern library and then import the designs and content data model into Drupal with a single drush command.\n\n\nNeed to update your design? No problem! Just update and QA the code in your pattern library and import those changes to Drupal in seconds.\n\n\nWhy\n\n\n\n\n\n\nThe Pattern Builder System empowers us to create a design system out of JSON schemas and Twig templates. To do this efficiently we need a tool that allows us to quickly prototype, build and validate our content structure and visual design.\n\n\n\n\n\n\nIt is important that developers and stakeholders have access to the growing design system.\n\n\n\n\n\n\nWhere\n\n\n\n\nDrupal.org: \nhttps://www.drupal.org/project/patternbuilder\n\n\nGitHub: \nhttps://github.com/PatternBuilder/pattern-builder-drupal\n\n\n\n\nHow\n\n\nThe Pattern Builder module contains a composer.json to build the library dependencies.\nBelow are some options to integrate the patternbuilder module into a project.\n\n\n\n\n\n\nComposer Manager Module: \nhttps://www.drupal.org/project/composer_manager\n\n\n\n\nInstall the composer_manager module.\n\n\nDownload and install the patternbuilder module: \ndrush en -y patternbuilder\n\n\nSee the Composer Manager's documentation for more commands.\n\n\n\n\n\n\n\n\nGit clone / Drush Make file\n\n\n\n\nClone repo to the site's modules directory (Example: \"sites/all/modules\").\n\n\nRun \ncomposer install\n within the patternbuilder module's directory.\n\n\n\n\n\n\n\n\nJSON Schema Support\n\n\n\n\n\n\nProperty \"uniqueId\"\n\n\nIf the schema defines a \"uniqueId\" property, then the property value is set to the paragraph entity's item id during the rendering process.\n\n\n\n\n\n\nTroubleshooting\n\n\nAll errors and warnings are logged via the Drupal watchdog() function.\nOne of the following modules should be enabled on the site:\n\n\n\n\nDatabase logging (dblog):\n\n\nDrupal configuration: \"/admin/config/development/logging\"\n\n\nView logs: \"/admin/reports/dblog\", filter by type = \"patternbuilder\"\n\n\n\n\n\n\nSyslog (syslog):\n\n\nDrupal configuration: \"/admin/config/development/logging\"\n\n\nView logs: Logs are available in the server log files, search for logs with \"patternbuilder\". Actual location depends on the server's config for syslog.\n\n\n\n\n\n\n\n\nLog Messages\n\n\nWARNING: 'Duplicate schemas found for \"my_schema\" at \"file:///path/to/schemas-alternative/my_schema.json\". The first schema registered will be used until this conflict has been resolved. Active schema: \"file:///path/to/schemas/my_schema.json\"'\n\n\nThe Pattern Builder module allows multiple schema directories to be defined at \"admin/config/content/patternbuilder\". This message is logged when there is a schema file with the same name in multiple directories.\n\n\n\n\nCheck that the schema directories are configured correctly at \"admin/config/content/patternbuilder\".\n\n\nVerify the schema files in the directories.\n\n\n\n\n\n\nERROR: 'An error occurred while rendering the \"pbi_my_schema\" paragraph item (id:1, revision:22) on node (id:234, revision:6788): Unable to find template \".twig\" (looked into: /var/www/html/path/to/schemas, /var/www/html/path/to/schemas-alternative) in \"my_band.twig\" at line 61.\n\n\nThe error log \"An error occurred while rendering ...\" occurs during rendering of the field formatter typically on the node page.  This error is logged for any error occurring in the Pattern Library rendering of the schema and TWIG template.\n\n\nThis is a silent error so that it does not stop the rendering of the rest of patterns and the Drupal page. The failed pattern will not be displayed on the page.\n\n\nA common error is displayed above. This is an error when a TWIG template includes another template without specifying a file name.\n\n\n\n\nTODO\n\n\nInstall Options: (NEEDS CLEANUP)\ninstall patternbuilder module, composer install in the patternbuilder module folder + install composer_manager\n\n\nOR\n\n\ninstall patternbuilder module, clone patternbuilder-lib-php into libraries and then composer install from there", 
            "title": "Drupal Module"
        }, 
        {
            "location": "/pattern_builder_module/#pattern-builder-drupal-module", 
            "text": "", 
            "title": "Pattern Builder Drupal Module"
        }, 
        {
            "location": "/pattern_builder_module/#what-is-it", 
            "text": "The Pattern Builder Module empowers your team to prototype in a static pattern library and then import the designs and content data model into Drupal with a single drush command.  Need to update your design? No problem! Just update and QA the code in your pattern library and import those changes to Drupal in seconds.", 
            "title": "What is it?"
        }, 
        {
            "location": "/pattern_builder_module/#why", 
            "text": "The Pattern Builder System empowers us to create a design system out of JSON schemas and Twig templates. To do this efficiently we need a tool that allows us to quickly prototype, build and validate our content structure and visual design.    It is important that developers and stakeholders have access to the growing design system.", 
            "title": "Why"
        }, 
        {
            "location": "/pattern_builder_module/#where", 
            "text": "Drupal.org:  https://www.drupal.org/project/patternbuilder  GitHub:  https://github.com/PatternBuilder/pattern-builder-drupal", 
            "title": "Where"
        }, 
        {
            "location": "/pattern_builder_module/#how", 
            "text": "The Pattern Builder module contains a composer.json to build the library dependencies.\nBelow are some options to integrate the patternbuilder module into a project.    Composer Manager Module:  https://www.drupal.org/project/composer_manager   Install the composer_manager module.  Download and install the patternbuilder module:  drush en -y patternbuilder  See the Composer Manager's documentation for more commands.     Git clone / Drush Make file   Clone repo to the site's modules directory (Example: \"sites/all/modules\").  Run  composer install  within the patternbuilder module's directory.", 
            "title": "How"
        }, 
        {
            "location": "/pattern_builder_module/#json-schema-support", 
            "text": "Property \"uniqueId\"  If the schema defines a \"uniqueId\" property, then the property value is set to the paragraph entity's item id during the rendering process.", 
            "title": "JSON Schema Support"
        }, 
        {
            "location": "/pattern_builder_module/#troubleshooting", 
            "text": "All errors and warnings are logged via the Drupal watchdog() function.\nOne of the following modules should be enabled on the site:   Database logging (dblog):  Drupal configuration: \"/admin/config/development/logging\"  View logs: \"/admin/reports/dblog\", filter by type = \"patternbuilder\"    Syslog (syslog):  Drupal configuration: \"/admin/config/development/logging\"  View logs: Logs are available in the server log files, search for logs with \"patternbuilder\". Actual location depends on the server's config for syslog.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pattern_builder_module/#log-messages", 
            "text": "WARNING: 'Duplicate schemas found for \"my_schema\" at \"file:///path/to/schemas-alternative/my_schema.json\". The first schema registered will be used until this conflict has been resolved. Active schema: \"file:///path/to/schemas/my_schema.json\"'  The Pattern Builder module allows multiple schema directories to be defined at \"admin/config/content/patternbuilder\". This message is logged when there is a schema file with the same name in multiple directories.   Check that the schema directories are configured correctly at \"admin/config/content/patternbuilder\".  Verify the schema files in the directories.    ERROR: 'An error occurred while rendering the \"pbi_my_schema\" paragraph item (id:1, revision:22) on node (id:234, revision:6788): Unable to find template \".twig\" (looked into: /var/www/html/path/to/schemas, /var/www/html/path/to/schemas-alternative) in \"my_band.twig\" at line 61.  The error log \"An error occurred while rendering ...\" occurs during rendering of the field formatter typically on the node page.  This error is logged for any error occurring in the Pattern Library rendering of the schema and TWIG template.  This is a silent error so that it does not stop the rendering of the rest of patterns and the Drupal page. The failed pattern will not be displayed on the page.  A common error is displayed above. This is an error when a TWIG template includes another template without specifying a file name.", 
            "title": "Log Messages"
        }, 
        {
            "location": "/pattern_builder_module/#todo", 
            "text": "Install Options: (NEEDS CLEANUP)\ninstall patternbuilder module, composer install in the patternbuilder module folder + install composer_manager  OR  install patternbuilder module, clone patternbuilder-lib-php into libraries and then composer install from there", 
            "title": "TODO"
        }, 
        {
            "location": "/pattern_builder_importer/", 
            "text": "Pattern Builder Schema Importer Drupal Module\n\n\nTL;DR\n\n\nIt converts an library of JSON Schemas into Drupal paragraph bundles, and the JSON schema properties are converted into Drupal fields.\n\n\nWhy\n\n\n\n\n\n\nWith a library of patterns created in Pattern Builder, we need a method for creating each Drupal admin interface that allow users to enter the data needed for each template.\n\n\n\n\n\n\nAs a content admin, you may want to create a customizable content type(s) which include entity references to smaller content patterns, such as field collection bundles. These bundles will be built to match the defined components from the Style guide. This would expose the ability to both create content and control the ordering, layout, and design from within the node editing interface, and would be fully revisionable. Additionally, editors would be able reference \n include existing view blocks within the field groups. Editors could then apply data attributes such as layout and theme to these view blocks or field collections.\n\n\n\n\n\n\nWhere\n\n\n\n\nDrupal: \nhttps://www.drupal.org/project/patternbuilder\n\n\nGitHub: \nhttps://github.com/PatternBuilder/pattern-builder-drupal\n\n\n\n\nHow\n\n\n\n\n\n\nTech Setup\n\n\n\n\nInstall and enable module\n\n\n\n\nSet up the import paths\n\n\n\n\nVisit \nadmin/config/content/patternbuilder\n\n\nSchema directories\n\n\nTemplate directories\n\n\n\n\n\n\n\n\nUse Drush to run the pattern builder import command\n\n\n\n\nIf there are new patterns, then sync changes to the patternbuilder schema and template directories.\n\n\nRun \ndrush pbi\n\n\n\n\n\n\n\n\nView the imported patterns now stored as paragraph bundles\n\n\n\n\nVisit admin/structure/paragraphs\n\n\n\n\n\n\n\n\nManage Fields on the (new) content type,\n\n\n\n\nAdd a paragraphs field, choose which patterns you want to make available for content editors\n\n\nSet widget to \u201cEmbedded Patterns\u201d\n\n\n\n\n\n\n\n\nManage Display: Set the display format on the paragraph field to \"Patternbuilder rendered items\"\n\n\n\n\nOther Notes:\n\n\nOptional: Modify the content type node--[type].tpl.php as needed to remove other regions etc.\n\n\n\n\n\n\n\n\n\n\n\n\nDrush Commands\n\n\n\n\n\n\nImports patterns from defined library\n\n\n\n\ndrush pbi : Import all schemas.\n\n\ndrush pbi --all : Force the import of all schemas even if specific schemas are defined.\n\n\ndrush pbi band card : Import only the \"band\" and \"card\" schemas.\n\n\ndrush pbi --type=layout : Import only the schemas for the \"layout\" pattern type.\n\n\ndrush pbi image_box\n\n\n\n\n\n\n\n\nRemove imported patterns from Drupal\n\n\n\n\ndrush pbi-remove \u00a0: Nothing is removed. This safeguards against accidental commands.\n\n\ndrush pbi-remove --all : Removes all schemas.\n\n\ndrush pbi-remove band card : Removes only the \"band\" and \"card\" schemas.\n\n\ndrush pbi-remove --type=layout : Removes only the schemas for the \"layout\" pattern type.\n\n\n\n\n\n\n\n\n\n\n\n\nJSON Schema Support\n\n\nThe schema used by Pattern Builder is based on \nJSON Schema\n with customizations for the Drupal importer.\n\n\n\n\n\n\nProperty Types:\n\n\n\n\nPrimitive types: \"boolean\", \"integer\", \"number\", \"string\", \"text\", \"textarea\".\n\n\nSingle level group of properties: \"object\".\n\n\nMultiple values with the same object properties: \"array\".\n\n\n\n\n\n\n\n\nHidden on the edit form\n\n\n\n\nSchema: \n\"options: { \"hidden\": true }\n\n\nDrupal configuration: Field instance setting.\n\n\n\n\n\n\n\n\nRead-only on the edit form\n\n\n\n\nSchema: \n\"readonly\": true\n\n\nDrupal configuration: Field instance setting.\n\n\n\n\n\n\n\n\nNon-imported properties:\n\n\nIf a property does not need to be imported as a Drupal field, then it can be flagged to not import it with:\n\n\n\n\nSchema: \n\"options: { \"import\": false }\n\n\nDrupal configuration: None\n\n\n\n\n\n\n\n\nTextarea\n\n\nTextareas are imported to a Drupal field type of \"text_long\". A schema property is consider to be a textarea if one of the following is true:\n\n\n\n\nSchema: \n\"format\": \"textarea\"\n OR \n\"format\": \"html\"\n\n\nDrupal configuration: Field type.\n\n\n\n\n\n\n\n\nWYSIWYG / Filtered text\n\n\nFilter text in Drupal provides the user with the Input Format selector. These commonly are configured to use a WYSIWYG editor.\nA schema property is determined to allow filtered text if the following is set:\n\n\n\n\nSchema: \n\"format\": \"html\"\n\n\nDrupal configuration: Field instance setting.\n\n\n\n\n\n\n\n\nCollapsible Field Groups and Field Collections\n\n\nThe \nfield_group\n module is required by the importer in order to provide basic single level grouping. The schema can control the collapsibility of a group of properties with the following:\n\n\n\n\n\n\nSchema:\n\n\n\"options\": {\n  \"collapsed\": true,\n  \"disable_collapse\": false\n}\n\n\n\n\n\n\nDrupal configuration: Field group setting, Field Collecton Fieldset widget.\n\n\n\n\n\n\n\n\n\n\nForm Grid Layout\n\n\nThis provides the ability to display grid style form elements.\n\n\n\n\n\n\nGlobal config: \"admin/config/content/patternbuilder\"\n\n\n\n\nRow class: The class for the row container in the grid layout.\n\n\nColumn class prefix: The number of columns will be appended to the column class prefix. Example: \"grid-columns-\" results in \"grid-columns-4\".\n\n\n\n\n\n\n\n\nSchema:\n\n\n\"options\": {\n  \"grid_columns\": 2\n},\n\"items\": {\n  \"format\": \"grid\"\n}\n\n\n\n\n\n\nDrupal configuration: Field instance setting.\n\n\n\n\n\n\n\n\n\n\nParagraphs preview display view mode\n\n\nThe importer can automatically setup up the \"Paragraphs Editor Preview\" view mode if the property is configured as \"preview\".  The importer has some default formatters for some common fields (text, image). Refer to the patternbuilder_importer.api.php for hooks that allow setting custom formatters for the preview view mode.\n\n\n\n\nSchema: \n\"options: { \"preview\": true }\n\n\nDrupal configuration: Field display view mode settings.\n\n\n\n\n\n\n\n\nOptional Drupal Extensions\n\n\nThe following are optional Drupal modules that are supported natively by the Pattern Builder Importer.  If these modules are enabled on the site, then the magic happens automatically.\n\n\n\n\n\n\nMedia (\nhttps://www.drupal.org/project/media\n)\n\n\n\n\nSupports: file, image, audio, video\n\n\nSchema usage: \"entity\": \"file|image|audio|video\"\n\n\n\n\n\n\n\n\nMedia Internet - Submodule of Media (\nhttps://www.drupal.org/project/media\n)\n\n\n\n\nSupports: internet based files\n\n\nSchema usage: \"entity\": \"file|image|audio|video\"\n\n\n\n\n\n\n\n\nMedia YouTube (\nhttps://www.drupal.org/project/media_youtube\n)\n\n\n\n\nSupports: YouTube videos\n\n\nSchema usage: \"entity\": \"video\"\n\n\n\n\n\n\n\n\nLink (\nhttps://www.drupal.org/project/link\n)\n\n\n\n\nSupports: link fields\n\n\nSchema usage: \"entity\": \"link\"\n\n\n\n\n\n\n\n\nField Collection (\nhttps://www.drupal.org/project/field_collection\n)\n\n\n\n\nSupports: array of objects imported as a field collection.\n\n\nSchema usage: \"type\": \"array\", \"items\": { Each item object definition }\n\n\n\n\n\n\n\n\nField Collection Fieldset (\nhttps://www.drupal.org/project/field_collection_fieldset\n)\n\n\n\n\nSupports: collapsible array of objects imported to a field collection.\n\n\nSchema usage: \"options\": {\"collapsed\": true/false, \"disable_collapse\": true/false}\n\n\n\n\n\n\n\n\nField Multiple Extended (\nhttps://www.drupal.org/project/field_multiple_extended\n)\n\n\n\n\nSupports: Set minimum and maximum items on a property.\n\n\nSchema usage: \"type\": \"array\", \"minItems\": 2, \"maxItems\": 10\n\n\n\n\n\n\n\n\nFuture Plans\n\n\n\n\nUse standard Drupal 8 rendering engine.\n\n\nCMI (config mgmt), use schemas to manipulate YML files.\n\n\n\n\nTroubleshooting\n\n\nAfter any import, check the logs to verify that there were no issues during the import. All errors and warnings are logged via the Drupal watchdog() function.\nOne of the following modules should be enabled on the site:\n\n\n\n\nDatabase logging (dblog):\n\n\nDrupal configuration: \"/admin/config/development/logging\"\n\n\nView logs: \"/admin/reports/dblog\", filter by type = \"patternbuilder_importer\"\n\n\n\n\n\n\nSyslog (syslog):\n\n\nDrupal configuration: \"/admin/config/development/logging\"\n\n\nView logs: Logs are available in the server log files, search for logs with \"patternbuilder_importer\". Actual location depends on the server's config for syslog.\n\n\n\n\n\n\n\n\nLog Messages\n\n\nWARNING: \"There were no schema files found to import.\"\n\n\nThe Pattern Builder module scans the schema directory for files with the .json extension. This message is logged if no schema files were found.\n\n\n\n\nCheck that the schema directories are configured correctly at \"admin/config/content/patternbuilder\".\n\n\nVerify that there are schema files in the directories.\n\n\n\n\n\n\nWARNING: 'There were no schema files found for the following: schema01, schema02.'\n\n\nThis message is logged when importing specific schemas and the importer cannot find the schema files.\n\n\nExample: \"drush pbi schema01 schema02\"\n\n\nThe files schema01.json and schema02.json cannot be found in the schema directories configured at \"admin/config/content/patternbuilder\".\n\n\n\n\nWARNING: 'The schema file does not exist: \"file:///path/to/schemas/schema01.json\"'\n\n\nThis message is logged if the schema file was registered but the file could not be found when attempting to load it.\n\n\n\n\nWARNING: 'The schema file name contains an invalid hyphen: \"file:///path/to/schemas/schema01.json\"'\n\n\nThe schema file names cannot contain a hyphen. The file name is used for the pattern's machine name and paragraph bundle name. The hyphens are replaced with underscores when using it as a paragraph bundle, therefore if the name has a hyphen then it would not be reversible in this replacement. See paragraphs_bundle_load().\n\n\n\n\nWARNING: 'The schema file is empty:  \"file:///path/to/schemas/schema01.json\"'\n\n\nThis message is logged when the loaded file is empty.\n\n\n\n\nWARNING: 'The schema file could not be decoded: \"file:///path/to/schemas/schema01.json\". The most common cause of this error is malformed JSON in the schema file.'\n\n\nThis message is logged when attempting to JSON decode the contents of the file. The most common cause of this error is malformed JSON in the schema file.\n\n\n\n\nWARNING: 'The schema file \"file:///path/to/schemas/schema01.json\" could not be loaded.'\n\n\nAn unknown error occurred that prevented the schema file from being loaded and decoded.\n\n\nPlease open a new issue on the patternbuilder module's \ndrupal.org issue queue\n and attached the schema file that will not import.\n\n\n\n\nWARNING: 'Meta type not found for \"someProperty\" of type \"not_found\".'\n\n\nThis occurs when the property type cannot be mapped to an importer meta type. See section \"Property Types\" above for available types.\n\n\n\n\nWARNING: 'Meta type handler could not be loaded for \"someProperty\" of type \"object\".'\n\n\nThis occurs for the following:\n- The property type could not be mapped to an import handler class.\n- The dependencies were not met for the found import handler class.\n\n\n\n\nWARNING: 'Meta type not found for reference \"someRefProperty\".'\n\n\nThis message is logged when the importer meta type could not be be determined for the referenced property.  The importer's factory will attempt to resolve the reference using a field reference and a field group reference resolver.\n\n\nThis could occur if the field or field group has not been created yet.  If the referenced property is defined in another schema, then care should be take to ensure the import order - referenced property schema first, then the schema referencing it.\nThe order can be controlled with pattern types (see hook_patternbuilder_pattern_types) or the file names in the directory.\n\n\n\n\nWARNING: 'Base field creation failed for @field'\n\n\nThe importer could not create the base field. Check the logs for other Drupal errors that occurred during the creation attempt.\n\n\n\n\nWARNING: 'Missing base field definition for @field'\n\n\nThe importer reached a scenario where it is attempting to create a field instance but there is not field base created yet.\n\n\nThis is an edge case. If encountered, please open an issue on the patternbuilder module's \ndrupal.org issue queue\n.\n\n\n\n\nERROR: 'field_123_text (text =\n text_long): Cannot change an existing field's type.'\n\n\nThis error occurs when the field type determine from the property's schema is different than the existing field's type in Drupal.\n\n\nThe patternbuilder.install provides a helper function to convert text fields.  This should be added to an update function before the fields are imported.\n\n\n/**\n * Convert awesome_pattern text property to a long text field.\n */\nfunction mymodule_update_7123() {\n  $pattern_name = 'awesome_pattern';\n  $property_name = 'text';\n  $field_type_new = 'text_long';\n\n  $instance = patternbuilder_field_info_property_instance($pattern_name, array($property_name));\n  if (!empty($instance['field_name'])) {\n    module_load_install('patternbuilder');\n    $converted = patternbuilder_convert_text_field($field_name, $new_type);\n    if ($converted) {\n      // Import schema to allow the importer to set any customizations for the\n      // field and instances.\n      patternbuilder_importer_import_schemas(array($pattern_name));\n    }\n    else {\n      $t = get_t();\n      $error_message = $t('@pattern @property could not be converted.', array(\n        '@pattern' =\n $pattern_name,\n        '@property' =\n implode('.', $property_names),\n      ));\n\n      if ($converted === FALSE) {\n        // Hard fail.\n        throw new DrupalUpdateException($error_message);\n      }\n      else {\n        // Soft fail for incomplete data or conversion not allowed.\n        watchdog('mymodule_update_7123', $error_message);\n      }\n    }\n  }\n}\n\n\n\n\nAllowed Drupal field type conversions via patternbuilder_convert_text_field():\n\n\n\n\n'text' TO 'text_long' or 'text_with_summary'.\n\n\n'text_long' TO 'text_with_summary'\n\n\n'text_with_summary' TO 'text_long': The 'summary' column is kept.\n\n\n\n\n\n\nERROR: 'The property references a schema that is not imported due to the status \"inactive\": \"schema_really_old.json#/properties/display_title\"'\n\n\nThis message is logged if the referenced property's schema has never been imported and there is a property referencing it.\n\n\nA referenced Drupal field cannot be found if the schema was never imported to a paragraph bundle.\n\n\n\n\nWARNING: 'The property references a schema that is not creatable due to the status \"deprecated\": \"schema_old.json#/properties/display_title\"'\n\n\nThis message is logged if the referenced property's schema is not creatable and there is a property referencing it.\n\n\n\n\nWARNING: 'The paragraphs field @field_name references a schema that is not imported due to the status \"inactive\", schema: schema_really_old.json'\n\n\nThe allowed schemas references a schema that is not imported based on the pattern's status. The \"inactive\" status is provided by the patternbuilder module.\n\n\nIn Drupal, this refers to the paragraphs field's allowed bundles (schemas) which must be available on the site. This is a WARNING since this only reduces the allowed bundle options and does not block the import.\n\n\n\n\nWARNING: 'The paragraphs field @field_name references a schema that is not creatable due to the status \"deprecated\", schema: schema_old.json'\n\n\nThe allowed schemas references a schema that is not creatable based on the pattern's status. The \"inactive\" and \"deprecated\" statuses are provided by the patternbuilder module.\n\n\nIn Drupal, this refers to the paragraphs field's allowed bundles (schemas) which must be allowed to be created on the site. This is a WARNING since this only reduces the allowed bundle options and does not block the import.\n\n\n\n\nWARNING: 'Child fields could not be created for field collection field_124_some_collection'\n\n\nThis is logged in the Field Collection import handler when the field collection field instance was not created. The field collection field must be created before attached fields to the field collection entity bundle.", 
            "title": "Drupal Schema Importer"
        }, 
        {
            "location": "/pattern_builder_importer/#pattern-builder-schema-importer-drupal-module", 
            "text": "", 
            "title": "Pattern Builder Schema Importer Drupal Module"
        }, 
        {
            "location": "/pattern_builder_importer/#tldr", 
            "text": "It converts an library of JSON Schemas into Drupal paragraph bundles, and the JSON schema properties are converted into Drupal fields.", 
            "title": "TL;DR"
        }, 
        {
            "location": "/pattern_builder_importer/#why", 
            "text": "With a library of patterns created in Pattern Builder, we need a method for creating each Drupal admin interface that allow users to enter the data needed for each template.    As a content admin, you may want to create a customizable content type(s) which include entity references to smaller content patterns, such as field collection bundles. These bundles will be built to match the defined components from the Style guide. This would expose the ability to both create content and control the ordering, layout, and design from within the node editing interface, and would be fully revisionable. Additionally, editors would be able reference   include existing view blocks within the field groups. Editors could then apply data attributes such as layout and theme to these view blocks or field collections.", 
            "title": "Why"
        }, 
        {
            "location": "/pattern_builder_importer/#where", 
            "text": "Drupal:  https://www.drupal.org/project/patternbuilder  GitHub:  https://github.com/PatternBuilder/pattern-builder-drupal", 
            "title": "Where"
        }, 
        {
            "location": "/pattern_builder_importer/#how", 
            "text": "Tech Setup   Install and enable module   Set up the import paths   Visit  admin/config/content/patternbuilder  Schema directories  Template directories     Use Drush to run the pattern builder import command   If there are new patterns, then sync changes to the patternbuilder schema and template directories.  Run  drush pbi     View the imported patterns now stored as paragraph bundles   Visit admin/structure/paragraphs     Manage Fields on the (new) content type,   Add a paragraphs field, choose which patterns you want to make available for content editors  Set widget to \u201cEmbedded Patterns\u201d     Manage Display: Set the display format on the paragraph field to \"Patternbuilder rendered items\"   Other Notes:  Optional: Modify the content type node--[type].tpl.php as needed to remove other regions etc.       Drush Commands    Imports patterns from defined library   drush pbi : Import all schemas.  drush pbi --all : Force the import of all schemas even if specific schemas are defined.  drush pbi band card : Import only the \"band\" and \"card\" schemas.  drush pbi --type=layout : Import only the schemas for the \"layout\" pattern type.  drush pbi image_box     Remove imported patterns from Drupal   drush pbi-remove \u00a0: Nothing is removed. This safeguards against accidental commands.  drush pbi-remove --all : Removes all schemas.  drush pbi-remove band card : Removes only the \"band\" and \"card\" schemas.  drush pbi-remove --type=layout : Removes only the schemas for the \"layout\" pattern type.", 
            "title": "How"
        }, 
        {
            "location": "/pattern_builder_importer/#json-schema-support", 
            "text": "The schema used by Pattern Builder is based on  JSON Schema  with customizations for the Drupal importer.    Property Types:   Primitive types: \"boolean\", \"integer\", \"number\", \"string\", \"text\", \"textarea\".  Single level group of properties: \"object\".  Multiple values with the same object properties: \"array\".     Hidden on the edit form   Schema:  \"options: { \"hidden\": true }  Drupal configuration: Field instance setting.     Read-only on the edit form   Schema:  \"readonly\": true  Drupal configuration: Field instance setting.     Non-imported properties:  If a property does not need to be imported as a Drupal field, then it can be flagged to not import it with:   Schema:  \"options: { \"import\": false }  Drupal configuration: None     Textarea  Textareas are imported to a Drupal field type of \"text_long\". A schema property is consider to be a textarea if one of the following is true:   Schema:  \"format\": \"textarea\"  OR  \"format\": \"html\"  Drupal configuration: Field type.     WYSIWYG / Filtered text  Filter text in Drupal provides the user with the Input Format selector. These commonly are configured to use a WYSIWYG editor.\nA schema property is determined to allow filtered text if the following is set:   Schema:  \"format\": \"html\"  Drupal configuration: Field instance setting.     Collapsible Field Groups and Field Collections  The  field_group  module is required by the importer in order to provide basic single level grouping. The schema can control the collapsibility of a group of properties with the following:    Schema:  \"options\": {\n  \"collapsed\": true,\n  \"disable_collapse\": false\n}    Drupal configuration: Field group setting, Field Collecton Fieldset widget.      Form Grid Layout  This provides the ability to display grid style form elements.    Global config: \"admin/config/content/patternbuilder\"   Row class: The class for the row container in the grid layout.  Column class prefix: The number of columns will be appended to the column class prefix. Example: \"grid-columns-\" results in \"grid-columns-4\".     Schema:  \"options\": {\n  \"grid_columns\": 2\n},\n\"items\": {\n  \"format\": \"grid\"\n}    Drupal configuration: Field instance setting.      Paragraphs preview display view mode  The importer can automatically setup up the \"Paragraphs Editor Preview\" view mode if the property is configured as \"preview\".  The importer has some default formatters for some common fields (text, image). Refer to the patternbuilder_importer.api.php for hooks that allow setting custom formatters for the preview view mode.   Schema:  \"options: { \"preview\": true }  Drupal configuration: Field display view mode settings.", 
            "title": "JSON Schema Support"
        }, 
        {
            "location": "/pattern_builder_importer/#optional-drupal-extensions", 
            "text": "The following are optional Drupal modules that are supported natively by the Pattern Builder Importer.  If these modules are enabled on the site, then the magic happens automatically.    Media ( https://www.drupal.org/project/media )   Supports: file, image, audio, video  Schema usage: \"entity\": \"file|image|audio|video\"     Media Internet - Submodule of Media ( https://www.drupal.org/project/media )   Supports: internet based files  Schema usage: \"entity\": \"file|image|audio|video\"     Media YouTube ( https://www.drupal.org/project/media_youtube )   Supports: YouTube videos  Schema usage: \"entity\": \"video\"     Link ( https://www.drupal.org/project/link )   Supports: link fields  Schema usage: \"entity\": \"link\"     Field Collection ( https://www.drupal.org/project/field_collection )   Supports: array of objects imported as a field collection.  Schema usage: \"type\": \"array\", \"items\": { Each item object definition }     Field Collection Fieldset ( https://www.drupal.org/project/field_collection_fieldset )   Supports: collapsible array of objects imported to a field collection.  Schema usage: \"options\": {\"collapsed\": true/false, \"disable_collapse\": true/false}     Field Multiple Extended ( https://www.drupal.org/project/field_multiple_extended )   Supports: Set minimum and maximum items on a property.  Schema usage: \"type\": \"array\", \"minItems\": 2, \"maxItems\": 10", 
            "title": "Optional Drupal Extensions"
        }, 
        {
            "location": "/pattern_builder_importer/#future-plans", 
            "text": "Use standard Drupal 8 rendering engine.  CMI (config mgmt), use schemas to manipulate YML files.", 
            "title": "Future Plans"
        }, 
        {
            "location": "/pattern_builder_importer/#troubleshooting", 
            "text": "After any import, check the logs to verify that there were no issues during the import. All errors and warnings are logged via the Drupal watchdog() function.\nOne of the following modules should be enabled on the site:   Database logging (dblog):  Drupal configuration: \"/admin/config/development/logging\"  View logs: \"/admin/reports/dblog\", filter by type = \"patternbuilder_importer\"    Syslog (syslog):  Drupal configuration: \"/admin/config/development/logging\"  View logs: Logs are available in the server log files, search for logs with \"patternbuilder_importer\". Actual location depends on the server's config for syslog.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pattern_builder_importer/#log-messages", 
            "text": "WARNING: \"There were no schema files found to import.\"  The Pattern Builder module scans the schema directory for files with the .json extension. This message is logged if no schema files were found.   Check that the schema directories are configured correctly at \"admin/config/content/patternbuilder\".  Verify that there are schema files in the directories.    WARNING: 'There were no schema files found for the following: schema01, schema02.'  This message is logged when importing specific schemas and the importer cannot find the schema files.  Example: \"drush pbi schema01 schema02\"  The files schema01.json and schema02.json cannot be found in the schema directories configured at \"admin/config/content/patternbuilder\".   WARNING: 'The schema file does not exist: \"file:///path/to/schemas/schema01.json\"'  This message is logged if the schema file was registered but the file could not be found when attempting to load it.   WARNING: 'The schema file name contains an invalid hyphen: \"file:///path/to/schemas/schema01.json\"'  The schema file names cannot contain a hyphen. The file name is used for the pattern's machine name and paragraph bundle name. The hyphens are replaced with underscores when using it as a paragraph bundle, therefore if the name has a hyphen then it would not be reversible in this replacement. See paragraphs_bundle_load().   WARNING: 'The schema file is empty:  \"file:///path/to/schemas/schema01.json\"'  This message is logged when the loaded file is empty.   WARNING: 'The schema file could not be decoded: \"file:///path/to/schemas/schema01.json\". The most common cause of this error is malformed JSON in the schema file.'  This message is logged when attempting to JSON decode the contents of the file. The most common cause of this error is malformed JSON in the schema file.   WARNING: 'The schema file \"file:///path/to/schemas/schema01.json\" could not be loaded.'  An unknown error occurred that prevented the schema file from being loaded and decoded.  Please open a new issue on the patternbuilder module's  drupal.org issue queue  and attached the schema file that will not import.   WARNING: 'Meta type not found for \"someProperty\" of type \"not_found\".'  This occurs when the property type cannot be mapped to an importer meta type. See section \"Property Types\" above for available types.   WARNING: 'Meta type handler could not be loaded for \"someProperty\" of type \"object\".'  This occurs for the following:\n- The property type could not be mapped to an import handler class.\n- The dependencies were not met for the found import handler class.   WARNING: 'Meta type not found for reference \"someRefProperty\".'  This message is logged when the importer meta type could not be be determined for the referenced property.  The importer's factory will attempt to resolve the reference using a field reference and a field group reference resolver.  This could occur if the field or field group has not been created yet.  If the referenced property is defined in another schema, then care should be take to ensure the import order - referenced property schema first, then the schema referencing it.\nThe order can be controlled with pattern types (see hook_patternbuilder_pattern_types) or the file names in the directory.   WARNING: 'Base field creation failed for @field'  The importer could not create the base field. Check the logs for other Drupal errors that occurred during the creation attempt.   WARNING: 'Missing base field definition for @field'  The importer reached a scenario where it is attempting to create a field instance but there is not field base created yet.  This is an edge case. If encountered, please open an issue on the patternbuilder module's  drupal.org issue queue .   ERROR: 'field_123_text (text =  text_long): Cannot change an existing field's type.'  This error occurs when the field type determine from the property's schema is different than the existing field's type in Drupal.  The patternbuilder.install provides a helper function to convert text fields.  This should be added to an update function before the fields are imported.  /**\n * Convert awesome_pattern text property to a long text field.\n */\nfunction mymodule_update_7123() {\n  $pattern_name = 'awesome_pattern';\n  $property_name = 'text';\n  $field_type_new = 'text_long';\n\n  $instance = patternbuilder_field_info_property_instance($pattern_name, array($property_name));\n  if (!empty($instance['field_name'])) {\n    module_load_install('patternbuilder');\n    $converted = patternbuilder_convert_text_field($field_name, $new_type);\n    if ($converted) {\n      // Import schema to allow the importer to set any customizations for the\n      // field and instances.\n      patternbuilder_importer_import_schemas(array($pattern_name));\n    }\n    else {\n      $t = get_t();\n      $error_message = $t('@pattern @property could not be converted.', array(\n        '@pattern' =  $pattern_name,\n        '@property' =  implode('.', $property_names),\n      ));\n\n      if ($converted === FALSE) {\n        // Hard fail.\n        throw new DrupalUpdateException($error_message);\n      }\n      else {\n        // Soft fail for incomplete data or conversion not allowed.\n        watchdog('mymodule_update_7123', $error_message);\n      }\n    }\n  }\n}  Allowed Drupal field type conversions via patternbuilder_convert_text_field():   'text' TO 'text_long' or 'text_with_summary'.  'text_long' TO 'text_with_summary'  'text_with_summary' TO 'text_long': The 'summary' column is kept.    ERROR: 'The property references a schema that is not imported due to the status \"inactive\": \"schema_really_old.json#/properties/display_title\"'  This message is logged if the referenced property's schema has never been imported and there is a property referencing it.  A referenced Drupal field cannot be found if the schema was never imported to a paragraph bundle.   WARNING: 'The property references a schema that is not creatable due to the status \"deprecated\": \"schema_old.json#/properties/display_title\"'  This message is logged if the referenced property's schema is not creatable and there is a property referencing it.   WARNING: 'The paragraphs field @field_name references a schema that is not imported due to the status \"inactive\", schema: schema_really_old.json'  The allowed schemas references a schema that is not imported based on the pattern's status. The \"inactive\" status is provided by the patternbuilder module.  In Drupal, this refers to the paragraphs field's allowed bundles (schemas) which must be available on the site. This is a WARNING since this only reduces the allowed bundle options and does not block the import.   WARNING: 'The paragraphs field @field_name references a schema that is not creatable due to the status \"deprecated\", schema: schema_old.json'  The allowed schemas references a schema that is not creatable based on the pattern's status. The \"inactive\" and \"deprecated\" statuses are provided by the patternbuilder module.  In Drupal, this refers to the paragraphs field's allowed bundles (schemas) which must be allowed to be created on the site. This is a WARNING since this only reduces the allowed bundle options and does not block the import.   WARNING: 'Child fields could not be created for field collection field_124_some_collection'  This is logged in the Field Collection import handler when the field collection field instance was not created. The field collection field must be created before attached fields to the field collection entity bundle.", 
            "title": "Log Messages"
        }, 
        {
            "location": "/using_pattern_builder/", 
            "text": "Various Scenarios of using pattern builder module\n\n\nAdd a Pattern Field to a Content Type\n\n\n\n\nCreate a new content type or use an existing one.\n\n\nAdd a paragraphs field with patterns enabled.\n\n\nWidget: \"Embedded Patterns\" or \"Embedded Patterns with Previewer\" (requires patternbuilder_previewer module).\n\n\nLimit the pattern selection by type (\"Pattern\", \"Components\"). These need to be defined in hook_patternbuilder_pattern_types().\n\n\nAny non-pattern paragraph needs to be explicitly selected in the list of \"Allowed paragraph bundles\"\n\n\n\n\n\n\nDisplay Formatter: \"Patternbuilder rendered items\"\n\n\nSelect display mode used to render the embed paragraphs. Defaults to \"Full\". For Patterns, the formatted values of the paragraph field is sent to the TWIG templates for display.\n\n\n\n\n\n\n\n\n\n\nCreate content with Patterns!\n\n\n\n\nChoose a method\n\n\n\n\n\n\nThe whole kit AND kaboodle! (recommended) \u00a0Use pattern builder importer to pull in your patterns and schemas from your component library\n\n\n\n\nBuild a content type with a Pattern field (see above).\n\n\nConfigure the directories for the JSON schemas and TWIG templates at \"admin/config/content/patternbuilder\"\n\n\nEnable the patternbuilder_importer module.\n\n\nImport the Pattern Schemas to Paragraph bundles:\n\n\nFrom the command line, run \"drush pbi\".\n\n\n(TODO) From the UI: Pending development.\n\n\n\n\n\n\n\n\n\n\n\n\nHybrid: \u00a0Map existing Drupal fields to Schema properties\n\n\n\n\nAllows for developers to map data (even from external sources) to the json/twig data.\n\n\nGood for existing content types.\n\n\nNot good for complex field setups since hand mapping takes time and is error prone.\n\n\nHow:\n\n\nOverride the node view of a given content type.\n\n\nUse the existing Drupal fields to build the render object using the PatternBuilder Library.\n\n\nSet the node view content as the rendered object.\n\n\n\n\n\n\n\n\n\n\n\n\n(TODO) Component library only, No importer\n\n\n\n\nBuild a content type with a Pattern field (see above).\n\n\nConfigure the directories for the JSON schemas and TWIG templates at \"admin/config/content/patternbuilder\"\n\n\nCreate a paragraph bundle.\n\n\n(TODO: Pending development) Associate the paragraph bundle with a JSON Schema.\n\n\nAdd a field to the paragraph bundle.\n\n\nConfigure the section \"Pattern Builder\".\n\n\nRequired: Set the \"Property name\" of the JSON Schema property that maps to this field.\n\n\n\n\n\n\n\n\n\n\n\n\nOther things to note\n\n\n\n\nYour Drupal theme should (only) be responsible for the chrome of the site (header \n footer)", 
            "title": "Drupal Usage"
        }, 
        {
            "location": "/using_pattern_builder/#various-scenarios-of-using-pattern-builder-module", 
            "text": "", 
            "title": "Various Scenarios of using pattern builder module"
        }, 
        {
            "location": "/using_pattern_builder/#add-a-pattern-field-to-a-content-type", 
            "text": "Create a new content type or use an existing one.  Add a paragraphs field with patterns enabled.  Widget: \"Embedded Patterns\" or \"Embedded Patterns with Previewer\" (requires patternbuilder_previewer module).  Limit the pattern selection by type (\"Pattern\", \"Components\"). These need to be defined in hook_patternbuilder_pattern_types().  Any non-pattern paragraph needs to be explicitly selected in the list of \"Allowed paragraph bundles\"    Display Formatter: \"Patternbuilder rendered items\"  Select display mode used to render the embed paragraphs. Defaults to \"Full\". For Patterns, the formatted values of the paragraph field is sent to the TWIG templates for display.      Create content with Patterns!", 
            "title": "Add a Pattern Field to a Content Type"
        }, 
        {
            "location": "/using_pattern_builder/#choose-a-method", 
            "text": "The whole kit AND kaboodle! (recommended) \u00a0Use pattern builder importer to pull in your patterns and schemas from your component library   Build a content type with a Pattern field (see above).  Configure the directories for the JSON schemas and TWIG templates at \"admin/config/content/patternbuilder\"  Enable the patternbuilder_importer module.  Import the Pattern Schemas to Paragraph bundles:  From the command line, run \"drush pbi\".  (TODO) From the UI: Pending development.       Hybrid: \u00a0Map existing Drupal fields to Schema properties   Allows for developers to map data (even from external sources) to the json/twig data.  Good for existing content types.  Not good for complex field setups since hand mapping takes time and is error prone.  How:  Override the node view of a given content type.  Use the existing Drupal fields to build the render object using the PatternBuilder Library.  Set the node view content as the rendered object.       (TODO) Component library only, No importer   Build a content type with a Pattern field (see above).  Configure the directories for the JSON schemas and TWIG templates at \"admin/config/content/patternbuilder\"  Create a paragraph bundle.  (TODO: Pending development) Associate the paragraph bundle with a JSON Schema.  Add a field to the paragraph bundle.  Configure the section \"Pattern Builder\".  Required: Set the \"Property name\" of the JSON Schema property that maps to this field.", 
            "title": "Choose a method"
        }, 
        {
            "location": "/using_pattern_builder/#other-things-to-note", 
            "text": "Your Drupal theme should (only) be responsible for the chrome of the site (header   footer)", 
            "title": "Other things to note"
        }
    ]
}